//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using TWANCOSMETICS.Models;

namespace TWANCOSMEICS.Models
{
    public partial class TWANDBContext : DbContext
    {
        public TWANDBContext()
            : base("name=TWANDbContext")
        {
        }

        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<CartDetail> CartDetail { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Inventory> Inventory { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Brand>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<Brand>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<Brand>()
                .HasMany(e => e.Product)
                .WithRequired(e => e.Brand)
                .HasForeignKey(e => e.brand_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Cart>()
                .HasMany(e => e.CartDetail)
                .WithRequired(e => e.Cart)
                .HasForeignKey(e => e.cart_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Category>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<Category>()
                .HasMany(e => e.Product)
                .WithRequired(e => e.Category)
                .HasForeignKey(e => e.category_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Feedback>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<Image>()
                .Property(e => e.u_image)
                .IsUnicode(false);

            modelBuilder.Entity<Image>()
                .HasMany(e => e.Brand)
                .WithOptional(e => e.Image)
                .HasForeignKey(e => e.image_id);

            modelBuilder.Entity<Image>()
                .HasMany(e => e.Post)
                .WithRequired(e => e.Image)
                .HasForeignKey(e => e.image_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Image>()
                .HasMany(e => e.Product)
                .WithOptional(e => e.Image)
                .HasForeignKey(e => e.image_id);

            modelBuilder.Entity<Image>()
                .HasMany(e => e.User)
                .WithOptional(e => e.Image)
                .HasForeignKey(e => e.image_id);

            modelBuilder.Entity<Image>()
                .HasMany(e => e.Voucher)
                .WithOptional(e => e.Image)
                .HasForeignKey(e => e.image_id);

            modelBuilder.Entity<Inventory>()
                .Property(e => e.variant)
                .IsUnicode(false);

            modelBuilder.Entity<Inventory>()
                .Property(e => e.quantity)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Inventory>()
                .HasMany(e => e.CartDetail)
                .WithRequired(e => e.Inventory)
                .HasForeignKey(e => e.inventory_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Order>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<Order>()
                .Property(e => e.email)
                .IsUnicode(false);

            modelBuilder.Entity<Order>()
                .Property(e => e.address)
                .IsUnicode(false);

            modelBuilder.Entity<Order>()
                .Property(e => e.phone)
                .IsUnicode(false);

            modelBuilder.Entity<Order>()
                .Property(e => e.total)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Order>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<Order>()
                .HasMany(e => e.OrderDetail)
                .WithRequired(e => e.Order)
                .HasForeignKey(e => e.order_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OrderDetail>()
                .Property(e => e.total)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Post>()
                .Property(e => e.content)
                .IsUnicode(false);

            modelBuilder.Entity<Post>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<Product>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<Product>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<Product>()
                .Property(e => e.SKU)
                .IsUnicode(false);

            modelBuilder.Entity<Product>()
                .HasMany(e => e.Feedback)
                .WithRequired(e => e.Product)
                .HasForeignKey(e => e.product_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Product>()
                .HasMany(e => e.Inventory)
                .WithRequired(e => e.Product)
                .HasForeignKey(e => e.product_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Role>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<Role>()
                .HasMany(e => e.User)
                .WithRequired(e => e.Role)
                .HasForeignKey(e => e.role_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<User>()
                .Property(e => e.fullname)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.email)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.phoneNumber)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.address)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.username)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .Property(e => e.password)
                .IsUnicode(false);

            modelBuilder.Entity<User>()
                .HasMany(e => e.Cart)
                .WithRequired(e => e.User)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<User>()
                .HasMany(e => e.Feedback)
                .WithRequired(e => e.User)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<User>()
                .HasMany(e => e.Order)
                .WithRequired(e => e.User)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<User>()
                .HasMany(e => e.Post)
                .WithRequired(e => e.User)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Voucher>()
                .Property(e => e.code)
                .IsUnicode(false);

            modelBuilder.Entity<Voucher>()
                .Property(e => e.discount_percentage)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Voucher>()
                .Property(e => e.discount_price)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Voucher>()
                .Property(e => e.min_bill)
                .HasPrecision(18, 0);

            modelBuilder.Entity<Voucher>()
                .HasMany(e => e.Order)
                .WithOptional(e => e.Voucher)
                .HasForeignKey(e => e.id_voucher);
        }
    }
}
