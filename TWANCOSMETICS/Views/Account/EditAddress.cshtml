
@{
    ViewBag.Title = "EditAddress";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model TWANCOSMETICS.Models.AddresModel
@{
    var u = Session["Account"] as TWANCOSMETICS.Models.User;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Thông tin tài khoản</title>
    @Styles.Render("~/Styles/Css/InfoManagement.css")
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300&family=Pacifico&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

</head>

<div class="frame">
    Trang chủ/Thông tin tài khoản
</div>
@*<div class="frame2">
    <div class="frame21">*@
<p class="txtTaikhoan">Địa chỉ</p>
@using (Html.BeginForm("EditAddress", "Account", FormMethod.Post, new { @class = "flex-item-right", @style = "overflow-x: auto;" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
    <table>
        <tr>
            <td>
                <label>Địa chỉ</label>

            </td>
            <td>
                @Html.TextBoxFor(model => model.Region, new { @class = "input", placeholder = "Địa chỉ", @autofocus = "autofocus" })
                <p>@Html.ValidationMessageFor(model => model.Region, "", new { @class = "alert alert-danger" })</p>
            </td>
        </tr>
        <tr>
            <td>
                <label>Tỉnh/Thành phố</label>
            </td>
            <td>
                @Html.DropDownListFor(model => model.City, new SelectList(new List<Object> { }), "Chọn tỉnh/thành phố", new { @class = "form-select form-select-sm mb-3", id = "city", name = "city", style = "margin-right: 0.5cm;" })
                <p>@Html.ValidationMessageFor(model => model.City, "", new { @class = "alert alert-danger" })</p>
            </td>
        </tr>
        <tr>
            <td>
                <label>Quận/Huyện</label>
            </td>
            <td>
                @Html.DropDownListFor(model => model.District, new SelectList(new List<Object> { }), "Chọn quận/huyện", new { @class = "form-select form-select-sm mb-3", id = "district", name = "district", style = "margin-right: 0.5cm;" })
                <p>@Html.ValidationMessageFor(model => model.District, "", new { @class = "alert alert-danger" })</p>
            </td>
        </tr>
        <tr>
            <td>
                <label>Xã/Phường</label>
            </td>
            <td>
                @Html.DropDownListFor(model => model.Ward, new SelectList(new List<Object> { }), "Chọn phường/xã", new { @class = "form-select form-select-sm mb-3", id = "ward", name = "ward", style = "margin-right: 0.5cm;" })
                <p>@Html.ValidationMessageFor(model => model.Ward, "", new { @class = "alert alert-danger" })</p>
            </td>
        </tr>
        <tr>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
            <script>
                var citis = document.getElementById("city");
                var districts = document.getElementById("district");
                var wards = document.getElementById("ward");
                var Parameter = {
                    url: "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json",
                    method: "GET",
                    responseType: "application/json",
                };
                var promise = axios(Parameter);
                promise.then(function (result) {
                    renderCity(result.data);
                });

                function renderCity(data) {
                    for (const x of data) {
                        citis.options[citis.options.length] = new Option(x.Name, x.Name);
                    }
                    citis.onchange = function () {
                        district.length = 1;
                        ward.length = 1;
                        if (this.value != "") {
                            const result = data.filter(n => n.Name === this.value);

                            for (const k of result[0].Districts) {
                                district.options[district.options.length] = new Option(k.Name, k.Name);
                            }
                        }
                    };
                    district.onchange = function () {
                        ward.length = 1;
                        const dataCity = data.filter((n) => n.Name === citis.value);
                        if (this.value != "") {
                            const dataWards = dataCity[0].Districts.filter(n => n.Name === this.value)[0].Wards;

                            for (const w of dataWards) {
                                wards.options[wards.options.length] = new Option(w.Name, w.Name);
                            }
                        }
                    };
                }
            </script>
        </tr>

        <tr>
            <td colspan="2">
                <button class="button-capnhat">Cập nhật</button>
            </td>
        </tr>
    </table>
}


@*</div>
    </div>*@
</body>
</html>

